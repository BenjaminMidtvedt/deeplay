# Generated by CodiumAI

import unittest
import torch
from .utils import (
    center_crop,
    center_pad,
    center_pad_to_largest,
    center_crop_to_smallest,
)


class TestCenterPadAndCrop(unittest.TestCase):
    # Test with input tensor of shape (batch_size, channels, height, width) and shape (height, width) to crop to.
    def test_center_crop_with_input_tensor(self):
        # Create input tensor
        input_tensor = torch.randn(2, 3, 10, 10)
        shape = (5, 5)

        # Call the center_crop function
        cropped_tensor = center_crop(input_tensor, shape)

        # Check if the cropped tensor has the correct shape
        self.assertEqual(cropped_tensor.shape, (2, 3, 5, 5))

        # Check if the cropped tensor is a valid crop of the input tensor
        self.assertTrue(torch.allclose(cropped_tensor, input_tensor[..., 2:7, 2:7]))

    def test_center_crop_to_smallest(self):
        # Create input tensor
        input_tensors = [
            torch.randn(2, 3, 5, 5),
            torch.randn(2, 3, 10, 10),
        ]

        # Call the center_crop function
        cropped_tensors = center_crop_to_smallest(input_tensors)

        # Check if the cropped tensors have the correct shape
        self.assertEqual(cropped_tensors[0].shape, (2, 3, 5, 5))
        self.assertEqual(cropped_tensors[1].shape, (2, 3, 5, 5))

        # Check if the cropped tensors are valid crops of the input tensors
        self.assertTrue(torch.allclose(cropped_tensors[0], input_tensors[0]))
        self.assertTrue(
            torch.allclose(cropped_tensors[1], input_tensors[1][..., 2:7, 2:7])
        )

    def test_center_pad_with_input_tensor(self):
        # Create input tensor
        input_tensor = torch.randn(2, 3, 5, 5)
        shape = (10, 10)

        # Call the center_pad function
        padded_tensor = center_pad(input_tensor, shape)

        # Check if the padded tensor has the correct shape
        self.assertEqual(padded_tensor.shape, (2, 3, 10, 10))

        # Check if the padded tensor is a valid padding of the input tensor
        self.assertTrue(torch.allclose(padded_tensor[..., 2:7, 2:7], input_tensor))

    def test_center_pad_to_largest(self):
        # Create input tensors
        input_tensors = [
            torch.randn(2, 3, 5, 5),
            torch.randn(2, 3, 10, 10),
        ]

        # Call the center_pad function
        padded_tensors = center_pad_to_largest(input_tensors)

        # Check if the padded tensors have the correct shape
        self.assertEqual(padded_tensors[0].shape, (2, 3, 10, 10))
        self.assertEqual(padded_tensors[1].shape, (2, 3, 10, 10))

        # Check if the padded tensors are valid paddings of the input tensors
        self.assertTrue(
            torch.allclose(padded_tensors[0][..., 2:7, 2:7], input_tensors[0])
        )
        self.assertTrue(torch.allclose(padded_tensors[1], input_tensors[1]))
